Questions : 

Problem Statement

Jack and Jill were going through a jungle to city. They encountered a monster who told they will only be allowed to escape when they solve a puzzle for him. They didn't have a choice so they agreed.

He states problem like : I have n buckets having 0 fruits in each bucket initially. I will give you n numbers denoting fruits required at nth position. But you need to keep 2 simple rules:

Either you can increment fruit count by 1 in each bucket i.e. Incremental Operation
Or you can double the fruits in each bucket i.e. Doubling operation.
Function Description:

Provide implementation for method play_the_game(target, arraySize). play_the_game has the following parameter(s):

target: an integer list denoting numbers of fruits required at nth position.
arraySize: an integer denoting numbers element in a list.
Input Format

Read array size
Read array elelemts
Constraints

1<=target[i]<=1000, where target[i] is the element at index Y.
1<=i<= 1000
Output Format

Print number of minimum operation requried to perform this task.

Sample Input 0

2
2 3
Sample Output 0

4
Sample Input 1

3
16 16 16
Sample Output 1

7

Coding :

#include <iostream>
#include <vector>
using namespace std;

int play_the_game(vector<int>& target, int arraySize) {
    int operations = 0;

    while (true) {
        bool allZero = true;
        bool allEven = true;

        for (int i = 0; i < arraySize; i++) {
            if (target[i] != 0) {
                allZero = false;
            }
            if (target[i] % 2 != 0) {
                allEven = false;
            }
        }

        if (allZero) break;

        if (allEven) {
            for (int i = 0; i < arraySize; i++) {
                target[i] /= 2;
            }
            operations++;
        } else {
            for (int i = 0; i < arraySize; i++) {
                if (target[i] % 2 != 0) {
                    target[i]--;
                    operations++;
                }
            }
        }
    }

    return operations;
}

int main() {
    int arraySize;
    cin >> arraySize;

    vector<int> target(arraySize);
    for (int i = 0; i < arraySize; i++) {
        cin >> target[i];
    }

    int result = play_the_game(target, arraySize);
    cout << result << endl;

    return 0;
}

