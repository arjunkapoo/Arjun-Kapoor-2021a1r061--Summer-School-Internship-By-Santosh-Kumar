Questions : 

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

Coding :

class Solution {
public:
 ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL) return head;
        ListNode *curr = head;
        int count=1;

        while(curr->next!=NULL){
            curr=curr->next;
            count++;
        }

        curr->next = head;
        curr = head;
        k = k%count;

        for(int i=1; i<(count-k); i++){
            curr = curr->next;
        }
        ListNode *temp = curr->next;
        curr->next = NULL;
        return temp;
    }
};
